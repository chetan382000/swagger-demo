openapi: 3.0.3
info:
  title: Swagger
  version: 1.0.11

components:
  # Authentication using bearer token
  securitySchemes:
    bearerAuth:
      description: "#### Example: Bearer [TOKEN]"
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /user/register:
    post:
      summary: Register
      description: |
        - User registration
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Rutvik
                email:
                  type: string
                  example: rutvik@mailinator.com
                password:
                  type: string
                  example: Makvana
                number:
                  type: string
                  example: 6355423641

              required:
                - name
                - email
                - password
                - number
      responses:
        200:
          description: "User successfully registered"
        400:
          description: "Bad request - invalid input"
  /user/login:
    post:
      summary: Login
      description: |
        - User Login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: rutvik@mailinator.com
                password:
                  type: string
                  example: Makvana

              required:
                - email
                - password
      responses:
        200:
          description: "User successfully logged in"
        401:
          description: "Unauthorized - invalid credentials"
        
  /user/get:
    get:
      security:
      - bearerAuth: []
      tags:
        - User
      summary: "Get user details"
      description: "Retrieve user details excluding password and token"
      responses:
        200:
          description: "Successful operation"
     
        500:
         description: "Server error"
  /user/update/{userId}:
    put:
      security:
      - bearerAuth: []
      tags:
        - User
      summary: "Update user information"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: userId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Rutvik
                email:
                  type: string
                  example: rutvik@mailinator.com
                number:
                  type: string
                  example: 6355423641
      responses:
        200:
          description: "User updated successfully"
          schema:
            type: object
            properties:
              message:
                type: string
        500:
          description: "Server error"
          schema:
            type: object
            properties:
              message:
                type: string
  /user/delete/{userId}:
    delete:
      security:
      - bearerAuth: []
      tags:
        - User
      summary: "Delete user"
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: userId
      responses:
        200:
          description: "User deleted successfully"
          schema:
            type: object
            properties:
              message:
                type: string
        500:
          description: "Server error"
          schema:
            type: object
            properties:
              message:
                type: string
  /user/forgot-password:
    post:
      summary: "Forgot Password"
      description: "Send reset password email to the user"
      tags:
        - User
      requestBody:
        requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: raval@yopmail.com

              required:
                - email
      responses:
        200:
          description: "Mail has been sent successfully"
        404:
          description: "User not found"
        500:
          description: "Internal server error"
    